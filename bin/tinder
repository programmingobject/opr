#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C0115,C0116,C0413,E0401,R0903


"created clients"


import os
import random
import shutil
import sys
import termios
import time
import traceback
import _thread


sys.path.insert(0, os.getcwd())


from opr.listens import Bus
from opr.command import Commands
from opr.errored import Errors
from opr.objects import Object, Persist, laps
from opr.reactor import Reactor
from opr.runtime import Cfg, scan
from opr.threads import launch
from opr.utility import parse


from opr import modules


DATE = time.ctime(time.time()).replace("  ", " ")
STARTTIME = time.time()


Cfg.debug = True
Cfg.name = "tinder"
Cfg.silent = False
Cfg.skip = ["debug",]
Cfg.workdir = ".test"


Persist.workdir = ".test"


paylock = _thread.allocate_lock()
outlock = _thread.allocate_lock()


errors = []
events = []


param = Object()
param.cfg = ["server=localhost", ""]
param.cmd = [""]
param.dlt = ["~bart@127.0.0.1"]
param.dne = ["test4", ""]
param.dpl = ["reddit title,summary,link", ""]
param.err = [""]
param.flt = ["", "0"]
param.rem = ["reddit", ""]
param.fnd = [
             'log',
             "cfg",
             "tdo",
             "rss",
             "tdo txt==test",
             "cfg server==localhost",
             "rss rss==reddit"
            ]
param.log = ["test1", ""]
param.met = ["~bart@127.0.0.1"]
param.mod = [""]
param.nme = ["reddit reddit"]
param.pwd = ["bla bla"]
param.rem = ["reddit"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.shp = ["bread", "butter", "cheese"]
param.tdo = ["test4", ""]
param.thr = [""]


class CLI(Reactor):

    def __init__(self):
        Reactor.__init__(self)
        Bus.add(self)
        self.register("event", Commands.handle)

    def raw(self, txt):
        with outlock:
            if txt and "v" in Cfg.opts:
                print(txt.rstrip())


def consume(evts):
    fixed = []
    res = []
    for evt in evts:
        res.append(evt.wait())
        if not evt.result:
            print(f"no result for {evt.cmd}")
        fixed.append(evt)
    for fff in fixed:
        try:
            evts.remove(fff)
        except ValueError:
            continue
    return res


def payload(clt) -> None:
    cmds = list(Commands.cmds.keys())
    random.shuffle(cmds)
    with paylock:
        nmr = 0
        for cmnd in cmds:
            for ex in getattr(param, cmnd, [""]):
                evt = clt.event(cmnd + " " + ex)
                clt.handle(evt)
                events.append(evt)
                nmr += 1
        return nmr


def waiter() -> None:
    got = []
    for ex in Errors.errors:
        if not Cfg.silent:
            traceback.print_exception(type(ex), ex, ex.__traceback__)
        got.append(ex)
    for exc in got:
        Errors.errors.remove(exc)


def wrap(func) -> None:
    old = termios.tcgetattr(sys.stdin.fileno())
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
        sys.stdout.flush()
    finally:
        termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)
    waiter()


def wrapped():
    wrap(main)

def main() -> None:
    print(f"{Cfg.name.upper()}\n\nstarted {DATE}")
    if os.path.exists(Cfg.workdir):
        shutil.rmtree(Cfg.workdir)
    parse(Cfg, " ".join(sys.argv[1:]))
    scan(modules, {}, False, True)
    if "v" in Cfg.opts:
        Errors.verbose = True
        Errors.raw = print
    nrs = Cfg.index or 1
    cli = CLI()
    cli.start()
    waiters = []
    for _nr in range(nrs):
        waiters.append(launch(payload, cli, name=_nr))
    result = 1
    for wtr in waiters:
        result += wtr.join() or 1
    consume(events)
    endtime = time.time()
    lap = laps(endtime - STARTTIME)
    percall = (endtime - STARTTIME)/result
    print(f"{lap} {result} {percall}")


if __name__ == "__main__":
    wrapped()
